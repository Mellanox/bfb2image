#!/usr/bin/bash 
# Original mlnx_bf_configure script is located at /sbin/mlnx_bf_configure.orig
# Temporary script. Need to support same flow as /sbin/mlnx_bf_configure.orig

is_bf=`lspci -s 00:00.0 2> /dev/null | grep -wq "PCI bridge: Mellanox Technologies" && echo 1 || echo 0`

if [ $is_bf -ne 1 ]; then
    exit 0
fi

info()
{
    logger -t $prog -i "INFO: $*"
}

error()
{

    logger -t $prog -i "ERR: $*"
}

get_eswitch_mode()
{
    pci_dev=$1
    shift
    devlink dev eswitch show pci/${pci_dev} 2> /dev/null | cut -d ' ' -f 3
}


set_eswitch_mode()
{
    pci_dev=$1
    mode=$2
    shift 2

    sudo devlink dev eswitch set pci/${pci_dev} mode ${mode}
    rc=$?
    if [ $rc -ne 0 ]; then
        error "Failed to configure ${mode} mode for ${pci_dev}"
    else
        info "Configured ${mode} mode for ${pci_dev}"
    fi

    return $rc
}

num_of_devs=0
for dev in `lspci -nD -d 15b3: | grep 'a2d[26c]' | cut -d ' ' -f 1`
do
    set_eswitch_mode ${dev} switchdev

    eswitch_mode=`get_eswitch_mode ${dev}`
    if [ "${eswitch_mode}" == "switchdev" ]; then
        num_of_devs=$((num_of_devs+1))
    fi
done


if [ $num_of_devs -eq 0 ]; then
    info "No devices configured to switchdev mod. Skipping SF/Bridges configuration."
    exit 0
fi

/sbin/mlnx-sf --action create --device 0000:03:00.0 --sfnum 0 --hwaddr 02:f4:d4:b3:a0:fe
/sbin/mlnx-sf --action create --device 0000:03:00.1 --sfnum 0 --hwaddr 02:f4:d4:b3:a0:ff

vsctl=`which ovs-vsctl 2> /dev/null`
if [ ! -n "$vsctl" ]; then
    echo "OVS is not installed"
    exit 1
fi

OVS_BRIDGE1=${OVS_BRIDGE1:-"ovsbr1"}
OVS_BRIDGE1_PORTS=${OVS_BRIDGE1_PORTS:-"p0 pf0hpf en3f0pf0sf0"}
OVS_BRIDGE2=${OVS_BRIDGE2:-"ovsbr2"}
OVS_BRIDGE2_PORTS=${OVS_BRIDGE2_PORTS:-"p1 pf1hpf en3f1pf1sf0"}
OVS_HW_OFFLOAD=${OVS_HW_OFFLOAD:-"yes"}
OVS_TIMEOUT=${OVS_TIMEOUT:-30}

ovs_service=="openvswitch-switch.service"
ovs_restart="/etc/init.d/openvswitch-switch restart"

ovs_restart()
{
    if [ -n "$ovs_service" ]; then
        info "Restarting $ovs_service"
        $ovs_restart
    fi
    # Re-apply udev settings removed by OVS
    if [ -x /lib/udev/mlnx_bf_udev ]; then
        for p in $(cd /sys/class/net; /bin/ls -d p* e*)
        do
            /lib/udev/mlnx_bf_udev $p > /dev/null 2>&1
        done
        fi

       for p in $OVS_BRIDGE1_PORTS $OVS_BRIDGE2_PORTS
       do
           ethtool -K $p hw-tc-offload on
       done
}

{
SECONDS=0
#WA to start openvswitch-switch service
/usr/share/openvswitch/scripts/ovs-ctl start

while ! ($vsctl show > /dev/null 2>&1)
do

    if [ $SECONDS -gt $OVS_TIMEOUT ]; then
        info "$ovs_service is not up. Exiting..."
       exit 1
	fi
    sleep 1
done

ovsbr_number=`$vsctl list-br | wc -l`
x=`whoami`


if [ $ovsbr_number -gt 0 ]; then
	if ($vsctl get Open_vSwitch . Other_config 2> /dev/null | grep 'hw-offload="true"'); then
		ovs_restart
	fi
	exit $RC
fi

CREATE_OVS_BRIDGES=${CREATE_OVS_BRIDGES:-"yes"}

if [ "X${CREATE_OVS_BRIDGES}" != "Xyes" ]; then
	exit $RC
fi

for i in `seq $num_of_devs`
do
	br_name=OVS_BRIDGE${i}
	br_name=${!br_name}
	br_ports=OVS_BRIDGE${i}_PORTS
	br_ports=${!br_ports}
	if ($vsctl br-exists $br_name); then
		info "bridge $br_name exist already."
		continue
	fi


	missing_port=0
	ovs_br_ports=""
	for port in $br_ports
	do
                x=`whoami`

		if [ -d /sys/class/net/$port ]; then
			ovs_br_ports="$ovs_br_ports $port"
		else
			info "port device $port for bridge $br_name is missing."
			case $port in
				pf*sf*)
					info "RDMA functionality is not expected to work without $port in $br_name"
				;;
				*)
					missing_port=$((missing_port+1))
				;;
			esac
		fi
	done

	if [ $missing_port -gt 0 ]; then
		info "Skipping $br_name configuration."
		#continue
	fi
	x=`whoami`

	$vsctl add-br $br_name
	info "Created bridge: $br_name"
	for port in $ovs_br_ports
	do
		x=`whoami`

		$vsctl add-port $br_name $port
		info "bridge $br_name: added port $port"
	done

done

if [ "X${OVS_HW_OFFLOAD}" == "Xyes" ]; then
	$vsctl set Open_vSwitch . Other_config:hw-offload=true
	if [ $? -eq 0 ]; then
		info "OVS HW offload is set"
		info "Going to restart $ovs_service to activate hw-offload"
		ovs_restart
	fi
fi
}
